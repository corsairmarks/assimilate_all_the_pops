# this = pop
set_post_assimilation_minimum_citizenship_pop = {
	optimize_memory
	if = {
		limit = { owner = { is_machine_empire = yes } }
		set_citizenship_type = {
			type = citizenship_full_machine
			country = owner
		}
		owner = { 
			if = {
				limit = { has_valid_civic = civic_machine_assimilator }
				if = {
					limit = { NOT = { has_active_tradition = tr_cybernetics_assimilator_adopt } }
					generate_cyborg_treats = yes
				}
				else = {
					generate_cyborg_extra_treats = yes
				}
			}
		}
	}
	else_if = {
		limit = { owner = { is_hive_empire = yes } }
		set_citizenship_type = {
			type = citizenship_full
			country = owner
		}
	}
	else_if = {
		limit = { owner = { is_regular_empire = yes } }
		if = {
			limit = {
				is_same_species = owner_species
				NOT = {
					has_citizenship_type = {
						type = citizenship_full
						country = owner
					}
				}
			}
			set_citizenship_type = {
				type = citizenship_full
				country = owner
				cooldown = no
			}
		}
		else_if = {
			limit = {
				OR = {
					is_robotic_species = no
					owner = { has_policy_flag = robots_allowed }
				}
				OR = {
					has_citizenship_type = {
						type = citizenship_assimilation
						country = owner
					}
					has_citizenship_type = {
						type = citizenship_purge
						country = owner
					}
				}
			}
			if = {
				limit = {
					is_robotic_species = yes
					owner = {
						OR = {
							has_policy_flag = ai_outlawed
							has_policy_flag = ai_servitude
						}
					}
				}
				set_citizenship_type = {
					type = citizenship_robot_servitude
					country = owner
					cooldown = no
				}
			}
			else_if = {
				limit = {
					owner = {
						OR = {
							is_xenophile = yes
							is_egalitarian = yes
						}
					}
				}
				set_citizenship_type = {
					type = citizenship_full
					country = owner
					cooldown = no
				}
			}
			else_if = {
				limit = {
					owner = {
						OR = {
							is_xenophobe = yes
							is_authoritarian = yes
						}
					}
				}
				set_citizenship_type = {
					type = citizenship_slavery
					country = owner
					cooldown = no
				}
			}
			else = {
				set_citizenship_type = {
					type = citizenship_limited
					country = owner
					cooldown = no
				}
			}
		}
	}
}

# this = pop
set_post_assimilation_minimum_living_standard_pop = {
	optimize_memory
	if = {
		limit = {
			owner = {
				OR = {
					is_machine_empire = yes
					is_hive_empire = yes
				}
			}
			NOT = {
				has_living_standard = {
					country = owner
					type = living_standard_hive_mind
				}
			}
		}
		set_living_standard = {
			country = owner
			type = living_standard_hive_mind
		}
	}
	else_if = {
		limit = {
			owner = { is_regular_empire = yes }
			OR = {
				has_living_standard = {
					type = living_standard_deassimilation
					country = owner
				}
				has_living_standard = {
					type = living_standard_deassimilation_cyborg
					country = owner
				}
				has_living_standard = {
					type = living_standard_deassimilation_machine
					country = owner
				}
				has_living_standard = {
					type = living_standard_ego_assimilation
					country = owner
				}
				has_living_standard = {
					type = living_standard_ego_assimilation_psionic
					country = owner
				}
				has_living_standard = {
					type = living_standard_cyborg_ego_assimilation
					country = owner
				}
				has_living_standard = {
					type = living_standard_cyborg_ego_assimilation_psionic
					country = owner
				}
				has_living_standard = {
					type = living_standard_tech_assimilation
					country = owner
				}
				has_living_standard = {
					type = living_standard_cyborg_assimilation
					country = owner
				}
				has_living_standard = {
					type = living_standard_cyborg_assimilation_psionic
					country = owner
				}
				has_living_standard = {
					type = living_standard_psi_assimilation
					country = owner
				}
				has_living_standard = {
					type = living_standard_psi_assimilation_cyborg
					country = owner
				}
				has_living_standard = {
					type = living_standard_none
					country = owner
				}
			}
		}
		if = {
			limit = {
				has_citizenship_type = {
					type = citizenship_purge
					country = owner
				}
			}
			set_living_standard = {
				type = living_standard_none
				country = owner
			}
		}
		else_if = {
			limit = {
				has_citizenship_type = {
					type = citizenship_robot_servitude
					country = owner
				}
			}
			set_living_standard = {
				type = living_standard_servitude
				country = owner
			}
		}
		else_if = {
			limit = {
				has_citizenship_type = {
					type = citizenship_slavery
					country = owner
				}
			}
			if = {
				limit = {
					owner = { is_authoritarian = yes }
					has_slavery_type = {
						type = slavery_military
						country = owner
					}
				}
				set_living_standard = {
					country = owner
					type = living_standard_stratified
					cooldown = no
				}
			}
			else = {
				set_living_standard = {
					country = owner
					type = living_standard_subsistence
					cooldown = no
				}
			}
		}
		else_if = {
			limit = { owner = { has_valid_civic = civic_shared_burden } }
			set_living_standard = {
				country = owner
				type = living_standard_shared_burden
				cooldown = no
			}
		}
		else_if = {
			limit = { owner = { is_pleasure_seeker = yes } }
			set_living_standard = {
				country = owner
				type = living_standard_decadent
				cooldown = no
			}
		}
		else_if = {
			limit = { owner = { is_materialist = yes } }
			set_living_standard = {
				country = owner
				type = living_standard_academic_privilege
				cooldown = no
			}
		}
		else_if = {
			limit = { owner = { is_authoritarian = yes } }
			set_living_standard = {
				country = owner
				type = living_standard_stratified
				cooldown = no
			}
		}
		else_if = {
			limit = {
				has_citizenship_type = {
					country = owner
					type = citizenship_full
				}
			}
			set_living_standard = {
				country = owner
				type = living_standard_normal
				cooldown = no
			}
		}
		else = {
			set_living_standard = {
				country = owner
				type = living_standard_subsistence
				cooldown = no
			}
		}
	}
}

# this = species (target)
# prev = species (current)
# prevprev = country (assimilator)
set_assimilation_flags = {
	optimize_memory
	set_timed_species_flag = {
		flag = assimilation_species_of_species@prev
		days = 30
	}
	set_timed_species_flag = {
		flag = assimilation_species_of_empire@prevprev
		days = 30
	}
}

# set up a species for cybernetic assimilation (non-hive), saved as event_target:prepared_species
# this = species
# prev = country (assimilator)
prepare_cyborg_species = {
	optimize_memory
	if = {
		limit = {
			exists = prev
			prev = {
				OR = {
					AND = {
						is_scope_type = country
						is_hive_empire = no
					}
					AND = {
						exists = owner
						owner = { is_hive_empire = no }
					}
				}
			}
		}
		modify_species = {
			species = this
			add_trait = trait_cybernetic
			add_traits_at_start_of_list = yes
			remove_trait = trait_self_modified
			remove_trait = trait_hive_mind
			change_scoped_species = no
			effect = {
				set_assimilation_flags = yes
				save_event_target_as = prepared_species
			}
		}
	}
	else = {
		modify_species = {
			species = this
			add_trait = trait_cybernetic
			add_trait = trait_hive_mind
			add_traits_at_start_of_list = yes
			remove_trait = trait_self_modified
			remove_trait = trait_latent_psionic
			remove_trait = trait_psionic
			change_scoped_species = no
			effect = {
				set_assimilation_flags = yes
				save_event_target_as = prepared_species
			}
		}
	}
}

# set up a species for hive assimilation
# this = species
# prev = country (assimilator)
prepare_hive_species = {
	optimize_memory
	modify_species = {
		species = this
		add_trait = trait_hive_mind
		add_traits_at_start_of_list = yes
		remove_trait = trait_self_modified
		remove_trait = trait_latent_psionic
		remove_trait = trait_psionic
		change_scoped_species = no
		effect = {
			set_assimilation_flags = yes
		}
	}
}

# set up a species for hive deassimilation
# this = species
# prev = country (assimilator)
prepare_unhive_species = {
	optimize_memory
	modify_species = {
		species = this
		remove_trait = trait_self_modified
		remove_trait = trait_hive_mind
		change_scoped_species = no
		effect = {
			set_assimilation_flags = yes
		}
	}
}

# set up a species for psionic assimilation
# this = species
# prev = country (assimilator)
prepare_psionic_species = {
	optimize_memory
	modify_species = {
		species = this
		add_trait = trait_psionic
		add_traits_at_start_of_list = yes
		remove_trait = trait_self_modified
		remove_trait = trait_latent_psionic
		change_scoped_species = no
		effect = {
			set_assimilation_flags = yes
		}
	}
}

# this = species, the (original) species to inspect for traits to convert to robotic traits as event_target:new_robotic_species
# event_target:new_robotic_species = used as the base species to be modified, will be overwritten with the new species if one or more traits are added
swap_species_traits_organic_to_robotic = {
	optimize_memory
	if = {
		limit = { has_trait = trait_agrarian }
		modify_species = {
			species = event_target:new_robotic_species
			add_trait = trait_robot_harvesters
			change_scoped_species = no
			effect = {
				save_event_target_as = new_robotic_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_ingenious }
		modify_species = {
			species = event_target:new_robotic_species
			add_trait = trait_robot_superconductive
			change_scoped_species = no
			effect = {
				save_event_target_as = new_robotic_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_industrious }
		modify_species = {
			species = event_target:new_robotic_species
			add_trait = trait_robot_power_drills
			change_scoped_species = no
			effect = {
				save_event_target_as = new_robotic_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_intelligent }
		modify_species = {
			species = event_target:new_robotic_species
			add_trait = trait_robot_logic_engines
			change_scoped_species = no
			effect = {
				save_event_target_as = new_robotic_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_thrifty }
		modify_species = {
			species = event_target:new_robotic_species
			add_trait = trait_robot_trading_algorithms
			change_scoped_species = no
			effect = {
				save_event_target_as = new_robotic_species
			}
		}
	}
	if = {
		limit = {
			OR = {
				has_trait = trait_rapid_breeders
				has_trait = trait_rapid_breeders_lithoid
				has_trait = trait_plantoid_budding
				has_trait = trait_lithoid_budding
				has_trait = trait_fertile
			}
		}
		modify_species = {
			species = event_target:new_robotic_species
			add_trait = trait_robot_mass_produced
			change_scoped_species = no
			effect = {
				save_event_target_as = new_robotic_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_slow_breeders }
		modify_species = {
			species = event_target:new_robotic_species
			add_trait = trait_robot_custom_made
			change_scoped_species = no
			effect = {
				save_event_target_as = new_robotic_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_conservational }
		modify_species = {
			species = event_target:new_robotic_species
			add_trait = trait_robot_durable
			change_scoped_species = no
			effect = {
				save_event_target_as = new_robotic_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_wasteful }
		modify_species = {
			species = event_target:new_robotic_species
			add_trait = trait_robot_high_maintenance
			change_scoped_species = no
			effect = {
				save_event_target_as = new_robotic_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_talented }
		modify_species = {
			species = event_target:new_robotic_species
			add_trait = trait_robot_enhanced_memory
			change_scoped_species = no
			effect = {
				save_event_target_as = new_robotic_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_quick_learners }
		modify_species = {
			species = event_target:new_robotic_species
			add_trait = trait_robot_learning_algorithms
			change_scoped_species = no
			effect = {
				save_event_target_as = new_robotic_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_slow_learners }
		modify_species = {
			species = event_target:new_robotic_species
			add_trait = trait_robot_repurposed_hardware
			change_scoped_species = no
			effect = {
				save_event_target_as = new_robotic_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_traditional }
		modify_species = {
			species = event_target:new_robotic_species
			add_trait = trait_robot_propaganda_machines
			change_scoped_species = no
			effect = {
				save_event_target_as = new_robotic_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_docile }
		modify_species = {
			species = event_target:new_robotic_species
			add_trait = trait_robot_streamlined_protocols
			change_scoped_species = no
			effect = {
				save_event_target_as = new_robotic_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_unruly }
		modify_species = {
			species = event_target:new_robotic_species
			add_trait = trait_robot_high_bandwidth
			change_scoped_species = no
			effect = {
				save_event_target_as = new_robotic_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_communal }
		modify_species = {
			species = event_target:new_robotic_species
			add_trait = trait_robot_double_jointed
			change_scoped_species = no
			effect = {
				save_event_target_as = new_robotic_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_solitary }
		modify_species = {
			species = event_target:new_robotic_species
			add_trait = trait_robot_bulky
			change_scoped_species = no
			effect = {
				save_event_target_as = new_robotic_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_charismatic }
		modify_species = {
			species = event_target:new_robotic_species
			add_trait = trait_robot_domestic_protocols
			change_scoped_species = no
			effect = {
				save_event_target_as = new_robotic_species
			}
		}
	}
	if = {
		limit = {
			OR = {
				has_trait = trait_nonadaptive
				has_trait = trait_repugnant
			}
		}
		# no direct equivalent, but luxurious at least refunds the same amount of points
		modify_species = {
			species = event_target:new_robotic_species
			add_trait = trait_robot_luxurious
			change_scoped_species = no
			effect = {
				save_event_target_as = new_robotic_species
			}
		}
	}
}

# this = species
# prev = country (assimilator)
# event_target:prepared_species = species to change into
aatp_convert_species = {
	optimize_memory
	save_event_target_as = previous_species
	prev = {
		every_owned_pop = {
			limit = { is_exact_same_species = prevprev }
			change_species = event_target:prepared_species
		}
		every_owned_army = {
			limit = {
				exists = species
				is_exact_same_species = prevprev
			}
			change_species = event_target:prepared_species
		}
		every_controlled_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				is_exact_same_species = prevprev
			}
			change_species = event_target:prepared_species
		}
		every_owned_leader = {
			limit = { is_exact_same_species = prevprev }
			change_species = event_target:prepared_species
			fire_on_action = {
				on_action = on_leader_species_changed
				scopes = {
					from = event_target:previous_species
				}
			}
		}
		every_pool_leader = {
			limit = { is_exact_same_species = prevprev }
			change_species = event_target:prepared_species
			fire_on_action = {
				on_action = on_leader_species_changed
				scopes = {
					from = event_target:previous_species
				}
			}
		}
		every_envoy = {
			limit = { is_exact_same_species = prevprev }
			change_species = event_target:prepared_species
			fire_on_action = {
				on_action = on_leader_species_changed
				scopes = {
					from = event_target:previous_species
				}
			}
		}
	}
}