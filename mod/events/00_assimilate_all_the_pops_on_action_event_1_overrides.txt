namespace = action

# Modified:
# * use triggers to test whether a species is undergoing a particular form of assimilation
# * use effects to set up the corresponding assimilated species
event = {
	id = action.64
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		any_playable_country = {
			num_unique_species > 1
			any_owned_pop_species = {
				has_citizenship_type = {
					type = citizenship_assimilation
					country = prev
				}
			}
		}
	}
	immediate = {
		log = "action.64"
		set_update_modifiers_batch = begin
        every_playable_country = {
            limit = {
                num_unique_species > 1
                any_owned_pop_species = {
                    has_citizenship_type = {
						type = citizenship_assimilation
						country = prev
                    }
                }
            }
			save_event_target_as = assimilating_country
			log = "action.64.every_playable_country: [assimilating_country.GetRealName]"
			every_owned_pop_species = {
				limit = {
					has_citizenship_type = {
						type = citizenship_assimilation
						country = prev
					}
				}
				log = "action.64.every_owned_pop_species: [This.GetName]"
				# synthetic assimilation deliberately does nothing here, see assimilation_effect
				if = { # cybernetic assimilation
					limit = { is_undergoing_assimilation_cyborg_species = yes }
					prepare_cyborg_species = yes
				}
				else_if = { # hive assimilation
					limit = { is_undergoing_assimilation_hive_species = yes }
					prepare_hive_species = yes
				}
				else_if = { # hive deassimilation
					limit = { is_undergoing_assimilation_unhive_species = yes }
					prepare_unhive_species = yes
				}
				else_if = { # psionic assimilation
					limit = { is_undergoing_assimilation_psionic_species = yes }
					prepare_psionic_species = yes
				}
			}
            every_owned_planet = {
				log = "action.64.every_owned_planet: [This.GetName]"
                planet_event = {
					id = action.65
				}
            }
        }
		set_update_modifiers_batch = end
    }
}

# Modified:
# * use separate variables for the maximum and counter
# * reduce code duplication
planet_event = {
	id = action.65
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		any_owned_pop = {
			has_citizenship_type = {
				type = citizenship_assimilation
				country = root.owner
			}
		}
	}
	immediate = {
		log = "action.65: [This.GetName]"
		random_list = {
			1 = { # 3 pops
				set_variable = {
					which = assimilation_maximum
					value = 3
				}
			}
			1 = { # 6 pops
				set_variable = {
					which = assimilation_maximum
					value = 6
				}
			}
			1 = { # 12 pops
				set_variable = {
					which = assimilation_maximum
					value = 12
				}
			}
		}
		if = {
			limit = { owner = { has_tradition = tr_cybernetics_assimilator_inevitable_assimilation } }
			change_variable = {
				which = assimilation_maximum
				value = 1
			}
		}
		set_variable = {
			which = assimilation_counter
			value = assimilation_maximum
		}
		while = {
			count = assimilation_maximum
			limit = {
				any_owned_pop = {
					has_citizenship_type = {
						type = citizenship_assimilation
						country = root.owner
					}
				}
				check_variable = {
					which = assimilation_counter
					value > 0
				}
			}
			assimilation_effect = yes
		}
		clear_variable = assimilation_counter
		clear_variable = assimilation_maximum
	}
}